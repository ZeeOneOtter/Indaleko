import argparse
import uuid
import json
import datetime
from indaleko import *
from dbsetup import IndalekoDBConfig
from indalekocolletions import *

'''
The purpose of this package is to create a common class structure for managing
Indaleko Services.

We have multiple sources of information that can be indexed by Indaleko.  Thus,
this provides a "registration mechanism" that allows a service to create a
registration endpoint and get back an object that it can use for interacting
with its service information.

The types of services envisioned here are:

* Indexers - these are component that gather data from storage locations.
* Ingesters - these are components that convert raw indexed information into a
  common format that is used when storing the actual data.

I expect there will be other kinds of services in the future, but that's the
list for now.
'''

class IndalekoService:
    def __init__(self, name: str = None, id: str = None, description: str = None, version: str = None, service_type: str = 'Indexer'):
        assert name is not None or id is not None, 'Either name or id must be specified.'
        pass



class IndalekoServices:

    ServicesSchema = {
        "$schema": "https://json-schema.org/draft/2020-12/schema#",
        "$id": "https://activitycontext.work/schema/serviceprovider.json",
        "title": "Service provider schema",
        "description": "This schema describes information about service providers within the Indaleko system.",
        "type": "object",
        "rule" : {
            "properties": {
                "identifier": {
                    "description": "This is the UUID of the given source for this metadata.",
                    "type": "string",
                    "format": "uuid"
                },
                "version": {
                    "description": "This is the version of the source provider. Versioning allows evolution of the data generated by the source.",
                    "type": "string",
                },
                "name": {
                    "description": "This is the (unique) name of the source provider.",
                    "type": "string"
                },
            },
            "required": ["identifier", "version", "name"],
        }
    }

    IndalekoServices = 'IndalekoServices'

    ServiceTypes = (
        'Indexer',
        'Ingester',
    )

    def __init__(self, reset: bool = False) -> None:
        self.db_config = IndalekoDBConfig()
        self.db_config.start()
        if self.db_config.db.has_collection(self.IndalekoServices) and reset:
            self.db_config.db.delete_collection(self.IndalekoServices)
        if self.db_config.db.has_collection(self.IndalekoServices):
            self.service_collection = IndalekoCollection(self.db_config.db, self.IndalekoServices, edge=False)
        else:
            self.create_indaleko_services_collection()


    def create_indaleko_services_collection(self) -> IndalekoCollection:
        '''
        This method creates the IndalekoServices collection in the database.
        '''
        assert not self.db_config.db.has_collection(self.IndalekoServices), f'{self.IndalekoServices} collection already exists, cannot create it.'
        self.service_collection = IndalekoCollection(self.db_config.db, self.IndalekoServices, edge=False)
        self.service_collection.add_schema(IndalekoServices.ServicesSchema)
        self.service_collection.create_index('name', 'persistent', ['name'], unique=True)
        return self.service_collection

    def lookup_service(self, name: str) -> dict:
        '''
        This method is used to lookup a service by name.
        '''
        return self.service_collection.find_entries(name =  name)


    def register_service(self, name: str, description: str, version: str, service_type : str = 'Indexer') -> 'IndalekoServices':
        assert service_type in IndalekoServices.ServiceTypes, f'Invalid service type {service_type} specified.'
        service_id = str(uuid.uuid4())
        new_service = {
            'name': name,
            'description': description,
            'version': version,
            'identifier' : service_id,
            'created' : datetime.datetime.now(datetime.UTC).isoformat(),
            '_key' : service_id,
        }
        self.service_collection.insert(new_service)
        return self.lookup_service(name)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    parser.add_argument('--reset', action='store_true', help='Reset the service collection.')
    args = parser.parse_args()
    services = IndalekoServices(reset=args.reset)
    print(services)
    service = services.lookup_service('test')
    if len(service) == 0:
        print('Service not found, creating it')
        services.register_service('test', 'This is a test service.', '1.0')
    else:
        print(service)


if __name__ == "__main__":
    main()
