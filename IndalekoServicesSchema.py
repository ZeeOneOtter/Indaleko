'''
This defines the Indaleko Services schema.

Project Indaleko
Copyright (C) 2024 Tony Mason

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
'''
import json
import jsonschema

from apischema.graphql import graphql_schema
from graphql import print_schema
from uuid import UUID

from IndalekoRecordSchema import IndalekoRecordSchema
from IndalekoServicesDataModel import IndalekoServicesDataModel

class IndalekoServicesSchema(IndalekoRecordSchema):
    '''This class defines the schema for Indaleko Services.'''

    def __init__(self):
        '''Initialize the Services schema.'''
        self.base_type = IndalekoServicesDataModel.IndalekoService
        super().__init__()

    @staticmethod
    def is_valid_services(indaleko_services : dict) -> bool:
        '''Given a dict, determine if it is a valid Indaleko Services.'''
        assert isinstance(indaleko_services, dict), 'services must be a dict'
        valid = False
        try:
            jsonschema.validate(instance=indaleko_services, schema=IndalekoServicesSchema.get_old_schema())
            valid = True
        except jsonschema.exceptions.ValidationError as error:
            print(f'Validation error: {error.message}')
        return valid

    @staticmethod
    def get_old_schema():
        services_schema = {
            "$schema": "https://json-schema.org/draft/2020-12/schema#",
            "$id": "https://activitycontext.work/schema/serviceprovider.json",
            "title": "Service provider schema",
            "description": "This schema describes information about service providers within the Indaleko system.",
            "type": "object",
            "rule" : {
                "properties": {
                    "Identifier": {
                        "description": "This is the UUID of the given source for this metadata.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "Version": {
                        "description": "This is the version of the source provider. Versioning allows evolution of the data generated by the source.",
                        "type": "string",
                    },
                    "Name": {
                        "description": "This is the (unique) name of the source provider.",
                        "type": "string"
                    },
                    "Type": {
                        "description": "This is the type of the service provider.",
                        "type": "string"
                    },
                },
                "required": ["Identifier", "Version", "Name", "Type"],
            }
        }
        assert 'Record' not in services_schema['rule']['properties'], 'Record must not be specified.'
        services_schema['rule']['properties']['Record'] = IndalekoRecordSchema.get_old_schema()['rule']
        services_schema['rule']['required'].append('Record')
        return services_schema

    @staticmethod
    def get_service(identifier : UUID) -> IndalekoServicesDataModel.IndalekoService:
        '''Return an IndalekoService object.'''
        service = IndalekoServicesDataModel.IndalekoService(
            Identifier = identifier,
            Version = '1.0.0',
            Name = 'Test Service',
            Type = 'Test'
        )
        return service

def main():
    '''Test code for IndalekoObjectSchema.'''
    services_schema = IndalekoServicesSchema()
    if services_schema.is_valid_schema_dict(IndalekoServicesSchema.get_old_schema()):
        print('Old schema is valid.')
    print(json.dumps(services_schema.get_old_schema(), indent=4))
    if services_schema.is_valid_schema():
        print('New schema is valid.')
    print(json.dumps(services_schema.get_schema(), indent=4))
    print('GraphQL Schema:')
    print(print_schema(graphql_schema(
        query=[IndalekoServicesSchema.get_service],
        types=[IndalekoServicesDataModel.IndalekoService])))

if __name__ == "__main__":
    main()

